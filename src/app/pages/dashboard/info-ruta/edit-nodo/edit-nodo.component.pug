
section.modalOptions.section
    .setOptions
      .card
        form( [formGroup]="form", #f="ngForm" ,(ngSubmit)="this.addNew()")
          .card-header
            h4 Información de nuevo cliente
          .card-body
            .row
              .form-group.col-md-12.col-lg-4
                label(for="nombre") Nombre
                input#nombre.form-control(  type="text", [(ngModel)]="this.name" ,formControlName="name" , name="name")
                app-field-error( *ngIf="this._formResources.isFieldValid('name', this.form) && this.form.get('name').errors.required ", [errorMsg]="this.errorFields.name.required" )
              .form-group.col-md-12.col-lg-4
                label(for="Apellido") Apellido
                input#Apellido.form-control(  type="text", [(ngModel)]="this.last_name" ,formControlName="last_name" , name="last_name")
                app-field-error( *ngIf="this._formResources.isFieldValid('last_name', this.form) && this.form.get('last_name').errors.required ", [errorMsg]="this.errorFields.last_name.required" )
              .form-group.col-md-12.col-lg-4
                label(for="Edad") Edad
                input#Edad.form-control(  type="number", [(ngModel)]="this.edad" ,formControlName="edad" , name="edad")
                app-field-error( *ngIf="this._formResources.isFieldValid('edad', this.form) && this.form.get('edad').errors.required ", [errorMsg]="this.errorFields.edad.required" )
            .row
              .form-group.col-md-12.col-lg-6
                label(for="Identificacion") Identificación
                input#Identificacion.form-control(  type="text", [(ngModel)]="this.card_id" ,formControlName="card_id" , name="card_id")
                app-field-error( *ngIf="this._formResources.isFieldValid('card_id', this.form) && this.form.get('card_id').errors.required ", [errorMsg]="this.errorFields.card_id.required" )
              .form-group.col-md-12.col-lg-6
                label(for="domicilio") Dirección de domicilio
                input#domicilio.form-control(  type="text", [(ngModel)]="this.domicilio" ,formControlName="domicilio" , name="domicilio")
                app-field-error( *ngIf="this._formResources.isFieldValid('domicilio', this.form) && this.form.get('domicilio').errors.required ", [errorMsg]="this.errorFields.domicilio.required" )
            //- .row
            //-   .form-group.col-md-12.col-lg-6
            //-     label(for="prestado") Cantidad prestada
            //-     input#prestado.form-control(  type="number", formControlName="prestado" , name="prestado")
            //-     app-field-error( *ngIf="this._formResources.isFieldValid('prestado', this.form) && this.form.get('prestado').errors.required ", [errorMsg]="this.errorFields.prestado.required" )
            //-   .form-group.col-md-12.col-lg-6
            //-     label(for="porcentaje") Porcentaje de ganancia
            //-     input#porcentaje.form-control(  type="number", formControlName="perce_pagos" , name="perce_pagos")
            //-     app-field-error( *ngIf="this._formResources.isFieldValid('perce_pagos', this.form) && this.form.get('perce_pagos').errors.required ", [errorMsg]="this.errorFields.perce_pagos.required" )
            //- .row
            //-   .form-group.col-md-12.col-lg-6
            //-     label(for="concurrencia") Concurrencia de cobro
            //-     .selectric-wrapper.selectric-form-control.selectric-selectric.selectric-below.selectric-open
            //-       .selectric-hide-select
            //-         select#concurrencia.form-control.selectric( type="text", formControlName="concurrencia" , name="concurrencia", tabindex="-1")
            //-           option(value="Diario") Diario
            //-           option(value="Semanal") Semanal
            //-           option(value="Mensual") Mensual
            //-           option(value="Otro") Otro
            //-         app-field-error( *ngIf="this._formResources.isFieldValid('concurrencia', this.form) && this.form.get('concurrencia').errors.required ", [errorMsg]="this.errorFields.concurrencia.required" )
            //-   .form-group.col-md-12.col-lg-6(*ngIf="this.form.value.concurrencia === 'Otro'")
            //-     label(for="concurrenciaCustom") Escribe una concurrencia
            //-     input#concurrenciaCustom.form-control( [disabled]="this.form.value.concurrencia != 'Otro'" ,type="number", formControlName="concurrenciaCustom" , name="concurrenciaCustom")
            //-     app-field-error( *ngIf="this._formResources.isFieldValid('concurrenciaCustom', this.form) && this.form.get('concurrenciaCustom').errors.required ", [errorMsg]="this.errorFields.concurrenciaCustom.required" )
            //- .row
            //-   .form-group.col-md-12.col-lg-6
            //-     label(for="posicion") Posición del cliente
            //-     .selectric-wrapper.selectric-form-control.selectric-selectric.selectric-below.selectric-open
            //-       .selectric-hide-select
            //-         select#posicion.form-control.selectric(   type="text", formControlName="posicion" , name="posicion", tabindex="-1")
            //-           option(value="Primero") Primer lugar
            //-           option(value="Ultimo") Último lugar
            //-           option(value="Medio") En medio
            //-           option(value="Especifico") Especifico
            //-         app-field-error( *ngIf="this._formResources.isFieldValid('posicion', this.form) && this.form.get('posicion').errors.required ", [errorMsg]="this.errorFields.posicion.required" )

            //-   .form-group.col-md-12.col-lg-6(*ngIf="this.form.value.posicion === 'Especifico'")
            //-     label(for="posicionCustom") Escribe el lugar de posición para el cliente
            //-     input#posicionCustom.form-control( [disabled]="this.form.value.posicion != 'Especifico'", type="number", formControlName="posicionCustom" , name="posicionCustom")
            //-     app-field-error( *ngIf="this._formResources.isFieldValid('posicionCustom', this.form) && this.form.get('posicionCustom').errors.required ", [errorMsg]="this.errorFields.posicionCustom.required" )
            .row
              .form-group.col-md-12.col-lg-12
                 .card
                  .card-header
                    h4.section-title Asigna un usuario cobrador a un cliente
                    .card-header-form
                      form.needs-validation( (ngSubmit)="this.search(  )" )
                        .input-group
                          input.form-control( [(ngModel)]="this.arg" ,type="text" , name="arg" , placeholder="Busqueda")
                          .input-group-btn
                            button.noBorder.btn.btn-primary(type="submit", style="border-radius: 0!important")
                              i.fas.fa-search
                            button.btn.btn-primary(type="button", (click)="this.getAllCollectorsByEnrouter(1)") Todos
                              //- i.fas.fa-search

                  .card-body.p-0
                    .table-responsive
                      table.table.table-striped.table-hover
                        tbody
                          tr
                            th Foto
                            th Nombre
                            th Apellido
                            th Estatus
                            th N° de clientes
                            th Detalles
                          tr.selectItem(*ngFor='let it2 of this.cobradores; let i = index', (click)="this.selectItem( it2._id )", [ngClass]="{ 'tableSelected' : this.cobradorSelected === it2._id }")
                            td
                              .avatarUser
                                img.rounded-circle(alt="image", src="assets/img/avatar/avatar-2.png", width="35", data-toggle="tooltip" ,data-placement="right", title="", data-original-title="Vivamus sagittis lacus vel augue laoreet rutrum faucibus.")
                                .role
                            td
                              p {{ it2.name }}
                            td
                              p {{ it2.last_name }}
                            td
                              p {{ it2.last_name }}
                            td
                              .badge.badge-success {{ it2.status }}
                            td
                              a.btn.btn-primary([routerLink]="['/dashboard/infoUser', it2._id ]", routerLinkActive="active") Detalles
                  app-paginator(*ngIf="( this.paginator != null ) && ( this.paginator.pageCount > 1 )", [paginator]="this.paginator", (newPageResponse)="this.newPageResponse($event)")


          .card-footer
            .row
              .spaceButtons
                button.btn.btn-primary( type="submit", *ngIf='this.confirmNotCollector == false' )
                  i.fas.fa-check
                  | Aceptar
                //- button.btn.btn-primary( type="submit", *ngIf='this.confirmNotCollector == true' )
                //-   i.fas.fa-check
                //-   | ¿Crear cliente sin cobrador designado?
                button.btn.btn-primary( type="button", (click)="this.closeDialog()" )
                  i.fas.fa-times
                  | Cerrar




